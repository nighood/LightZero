from easydict import EasyDict
import os
os.environ["CUDA_VISIBLE_DEVICES"] = "4"
# ==============================================================
# begin of the most frequently changed config specified by the user
# ==============================================================
collector_env_num = 8
n_episode = 8
evaluator_env_num = 3
num_simulations = 25
update_per_collect = 100
batch_size = 256
max_env_step = int(5e5)
reanalyze_ratio = 0.
seed = 0

width, height, h_3d = 80, 80, 100
uav_action_lst = [(0, 0, 0), (5, 0, 0), (0, 5, 0), (0, 0, 2), (-5, 0, 0), (0, -5, 0), (0, 0, -2)]
num_uavs = 2
num_people = 30
search_banjing_max = 10
uav_h_min = 10
single_action_shape = len(uav_action_lst)
observation_space = width * height + 3 * num_uavs
# ==============================================================
# end of the most frequently changed config specified by the user
# ==============================================================

active_search_efficientzero_config = dict(
    exp_name=
    f'Xia_result/1206new_env/activesearch_efficientzero_normr_np{num_people}_nu{num_uavs}_an{single_action_shape}_seed0',
    env=dict(
        env_name='ActiveSearch-v0',
        continuous=False,
        manually_discretization=False,
        collector_env_num=collector_env_num,
        evaluator_env_num=evaluator_env_num,
        n_evaluator_episode=evaluator_env_num,
        manager=dict(shared_memory=False, ),
        single_action_shape = single_action_shape,
        observation_space = observation_space,
        num_uavs = num_uavs,
        num_people = num_people,
        env_config=dict(
            width=width,
            height=height,
            h_3d=h_3d,
            seed=seed,
            num_uavs=num_uavs,
            num_people=num_people,
            EP_MAX_TIME=200,
            uav_action_lst=uav_action_lst,
            observation_size=width*height+3*num_uavs,
            search_banjing_max=search_banjing_max,
            save_replay=False,
        ),
        uav_config = dict(
            width=width,
            height=height,
            h_3d=h_3d,
            seed=seed,
            h_min=uav_h_min,
            uav_action_lst=uav_action_lst,
            search_banjing_max=search_banjing_max,
        ),
        people_config = dict(
            width=width,
            height=height,
            h_3d=h_3d,
            seed=seed,
            search_banjing_max=search_banjing_max,
        )
    ),
    policy=dict(
        model=dict(
            observation_shape=observation_space,
            action_space_size=single_action_shape**num_uavs,
            model_type='mlp', 
            lstm_hidden_size=128,
            latent_state_dim=128,
            discrete_action_encoding_type='one_hot',
            norm_type='BN', 
        ),
        cuda=True,
        env_type='not_board_games',
        game_segment_length=50,
        update_per_collect=update_per_collect,
        batch_size=batch_size,
        optim_type='Adam',
        lr_piecewise_constant_decay=False,
        learning_rate=0.003,
        num_simulations=num_simulations,
        reanalyze_ratio=reanalyze_ratio,
        n_episode=n_episode,
        eval_freq=int(2e2),
        replay_buffer_size=int(1e6),  # the size/capacity of replay_buffer, in the terms of transitions.
        collector_env_num=collector_env_num,
        evaluator_env_num=evaluator_env_num,
    ),
)

active_search_efficientzero_config = EasyDict(active_search_efficientzero_config)
main_config = active_search_efficientzero_config

active_search_efficientzero_create_config = dict(
    env=dict(
        type='activesearch_lightzero',
        import_names=['zoo.active_search.envs.active_search_env'],
    ),
    env_manager=dict(type='subprocess'),
    policy=dict(
        type='efficientzero',
        import_names=['lzero.policy.efficientzero'],
    ),
)
active_search_efficientzero_create_config = EasyDict(active_search_efficientzero_create_config)
create_config = active_search_efficientzero_create_config

if __name__ == "__main__":
    # Users can use different train entry by specifying the entry_type.
    entry_type = "train_muzero"  # options={"train_muzero", "train_muzero_with_gym_env"}

    if entry_type == "train_muzero":
        from lzero.entry import train_muzero
    elif entry_type == "train_muzero_with_gym_env":
        """
        The ``train_muzero_with_gym_env`` entry means that the environment used in the training process is generated by wrapping the original gym environment with LightZeroEnvWrapper.
        Users can refer to lzero/envs/wrappers for more details.
        """
        from lzero.entry import train_muzero_with_gym_env as train_muzero

    train_muzero([main_config, create_config], seed=0, max_env_step=max_env_step)
